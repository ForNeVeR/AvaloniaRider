buildscript {
    repositories {
        maven { setUrl("https://cache-redirector.jetbrains.com/www.myget.org/F/rd-snapshots/maven") }
        mavenCentral()
    }

    // https://www.myget.org/feed/rd-snapshots/package/maven/com.jetbrains.rd/rd-gen
    dependencies { classpath "com.jetbrains.rd:rd-gen:0.203.190" }
}

plugins {
    id 'java'
    id 'me.filippov.gradle.jvm.wrapper' version '0.9.3'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'org.jetbrains.intellij' version '0.6.5'
}

dependencies {
    implementation 'de.undercouch:bson4jackson:2.9.2'
    testImplementation 'org.testng:testng:6.14.3'
}

ext {
    pluginVersionBase = '1.0.0'
    sdkVersion = '2021.1.0'
    rdLibDirectory = {
        new File(intellij.ideaDependency.classes, "lib/rd")
    }
    dotNetDir = new File(projectDir, "src/dotnet")
    dotNetPluginId = "AvaloniaRider.Plugin"
}

repositories {
    mavenCentral()
}

wrapper {
    gradleVersion = '6.1.1'
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

jvmWrapper {
    // https://confluence.jetbrains.com/display/JBR/Release+notes
    linuxJvmUrl = 'https://bintray.com/jetbrains/intellij-jbr/download_file?file_path=jbrsdk-11_0_6-linux-x64-b765.15.tar.gz'
    macJvmUrl = 'https://bintray.com/jetbrains/intellij-jbr/download_file?file_path=jbrsdk-11_0_6-osx-x64-b765.15.tar.gz'
    windowsJvmUrl = 'https://bintray.com/jetbrains/intellij-jbr/download_file?file_path=jbrsdk-11_0_6-windows-x64-b765.15.tar.gz'
}

if (!ext.has("BuildConfiguration"))
    ext.BuildConfiguration = "Debug"

if (ext.has('buildNumber'))
    ext.version = "$ext.pluginVersionBase.$ext.buildNumber"
else
    ext.version = "$ext.pluginVersionBase.0"

if (ext.has("username"))
    intellij.publish.username = ext.username

if (ext.has("password"))
    intellij.publish.password = ext.password

version ext.version

sourceSets {
    main {
        java.srcDir 'src/rider/main/kotlin'
        resources.srcDir 'src/rider/main/resources'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

compileKotlin {
    dependsOn 'rdgen'
}

task compileDotNet {
    dependsOn 'rdgen'
    doLast {
        exec {
            executable "dotnet"
            args "build", "-c", BuildConfiguration
        }
    }
}

buildPlugin {
    dependsOn compileDotNet
}

intellij {
    type = 'RD'
    version = "$sdkVersion"
    downloadSources = false
    plugins = ['com.intellij.javafx:1.0.3', 'com.jetbrains.xaml.previewer']
}

runIde {
    // For statistics:
//    jvmArgs '-Xmx1500m', '-Didea.is.internal=true', '-Dfus.internal.test.mode=true'
    jvmArgs '-Xmx1500m'
}

test {
    useTestNG()
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}

apply plugin: 'com.jetbrains.rdgen'

rdgen {
    def modelDir = new File(projectDir, "protocol/src/main/kotlin/model")
    def csOutput = new File(projectDir, "src/dotnet/AvaloniaRider.Plugin/Model")
    def ktOutput = new File(projectDir, "src/rider/main/kotlin/model")

    verbose = true
    classpath {
        "${rdLibDirectory()}/rider-model.jar"
    }
    sources "$modelDir/rider"
    hashFolder = "$rootDir/build/rdgen/rider"
    packages = "model.rider"

    generator {
        language = "kotlin"
        transform = "asis"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "me.fornever.avaloniarider.model"
        directory = "$ktOutput"
    }

    generator {
        language = "csharp"
        transform = "reversed"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "AvaloniaRider.Model"
        directory = "$csOutput"
    }
}

patchPluginXml {
    untilBuild = null

    def changelogText = file("$projectDir/CHANGELOG.md").text
    def changelogMatches = changelogText =~ /(?s)##(.+?)(.+?)(?=##|$)/

    changeNotes = changelogMatches.collect {
        def versionTitle = it[1]
        def versionText = it[2].replaceAll(/(?s)\r?\n/, "<br />\n")
        "<b>$versionTitle</b>$versionText"
    }.take(10).join('')
}

prepareSandbox {
    def pluginId = "avalonia-rider"
    def reSharperPluginDesc = "fvnever.$pluginId"
    from('src/extensions', { into "${intellij.pluginName}/dotnet/Extensions/$reSharperPluginDesc" })

    def outputFolder = "$dotNetDir/$dotNetPluginId/bin/${dotNetPluginId}/$BuildConfiguration"
    def dllFiles = [
            "$outputFolder/${dotNetPluginId}.dll",
            "$outputFolder/${dotNetPluginId}.pdb"
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        from(file, { into "$intellij.pluginName/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File $file does not exist")
        })
    }
}

prepareTestingSandbox {
    def outputFolder = "$dotNetDir/$dotNetPluginId/bin/${dotNetPluginId}/$BuildConfiguration"
    def dllFiles = [
            "$outputFolder/${dotNetPluginId}.dll",
            "$outputFolder/${dotNetPluginId}.pdb"
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        from(file, { into "$intellij.pluginName/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File $file does not exist")
        })
    }
}

buildSearchableOptions.enabled = false
